name: Create Release on Tag

on:
  push:
    tags:
      - '*'

jobs:
  build-and-release-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration Release --no-restore

    - name: Publish artifacts
      run: dotnet publish --configuration Release --output ./publish

    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ebuild-artifacts-linux
        path: ./publish

    - name: Generate Release Notes
      id: release_notes
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const latestRelease = releases[0];
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed',
            since: latestRelease ? latestRelease.created_at : undefined,
          });
          const releaseNotes = issues
            .filter(issue => !issue.pull_request)
            .map(issue => `- ${issue.title} (#${issue.number})`)
            .join('\n');
          return releaseNotes || 'No closed issues for this release.';

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.result }}
        draft: false
        prerelease: true

    - name: Upload Linux Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish
        asset_name: ebuild-${{ github.ref_name }}-linux.zip
        asset_content_type: application/zip

  build-and-release-windows:
    runs-on: windows-latest
    needs: build-and-release-linux

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration Release --no-restore

    - name: Publish artifacts
      run: dotnet publish --configuration Release --output ./publish

    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ebuild-artifacts-windows
        path: ./publish

    - name: Upload Windows Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build-and-release-linux.outputs.create_release.outputs.upload_url }}
        asset_path: ./publish
        asset_name: ebuild-${{ github.ref_name }}-windows.zip
        asset_content_type: application/zip
